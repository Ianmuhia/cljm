// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, user_name, full_name, email, password_hash, profile_image, is_verified
FROM "users"
WHERE email = $1
  AND "users"."deleted_at" IS NULL
ORDER BY "users"."id"
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserName,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImage,
		&i.IsVerified,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, deleted_at, user_name, full_name, email, password_hash, profile_image, is_verified
FROM "users"
WHERE id = $1
  AND "users"."deleted_at" IS NULL
ORDER BY "users"."id"
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserName,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.ProfileImage,
		&i.IsVerified,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, user_name, full_name, email, password_hash, profile_image, is_verified
FROM "users"
WHERE "users"."deleted_at" IS NULL
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserName,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.ProfileImage,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "users"
SET user_name = $1,
    full_name = $2,
    email     = $3
WHERE id = $4
  AND "users"."deleted_at" IS NULL
`

type UpdateUserParams struct {
	UserName string
	FullName string
	Email    string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserName,
		arg.FullName,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateUserProfileImage = `-- name: UpdateUserProfileImage :exec
UPDATE "users"
SET profile_image = $1
WHERE id = $2
`

type UpdateUserProfileImageParams struct {
	ProfileImage sql.NullString
	ID           int64
}

func (q *Queries) UpdateUserProfileImage(ctx context.Context, arg UpdateUserProfileImageParams) error {
	_, err := q.db.Exec(ctx, updateUserProfileImage, arg.ProfileImage, arg.ID)
	return err
}
